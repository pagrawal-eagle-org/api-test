<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
	<inbound>
		<base />
	</inbound>
	<backend>
		<send-request mode="new" response-variable-name="data" timeout="30" ignore-error="true">
			<set-url>@{
                    string agreementNum= (string)context.Request.Url.Query.GetValueOrDefault("agreementNum");
                    string oslc_where=$"oslc.where=agreement_num={agreementNum}";

                    //string oslc_select="agreement_num,requested_by,fee_agreement_type,status,master_project_num,term_length_in_years,legacy_ind,abs_creation_date,abs_creation_user,start_date,request_date,end_date,extended_date,customer_location_id,fa_total_fees,fs_total_fees,ABS_FEE_AGREEMENT_ASSET{fa_total_fees,fs_total_fees,fa_instance_fees,pmfa,quotenum,assetnum,%20ABS_VESSEL.class_num--class_num,ABS_VESSEL.vessel_name--vessel_name,ABS_VESSEL.business_status--business_status,ABS_VESSEL.lifecycle_status--lifecycle_status,ABS_VESSEL.delivery_date--delivery_date,ABS_VESSEL.commercial_group--commercial_group,ABS_VESSEL.FACILITY_ID}	";
                    string oslc_select="abs_fee_agreementid,contract_num,business_organization_id,BILLING_FREQUENCY,BILLING_FREQUENCY_AMOUNT,travel_time_fee,agreement_num,requested_by,fee_agreement_type,status,master_project_num,term_length_in_years,legacy_ind,abs_creation_date,abs_creation_user,start_date,request_date,end_date,extended_date,customer_location_id,fa_total_fees,fs_total_fees,ABS_FEE_AGREEMENT_ASSET{fa_total_fees,fs_total_fees,fa_instance_fees,pmfa,quotenum,assetnum,%20ABS_VESSEL.class_num--class_num,ABS_VESSEL.vessel_name--vessel_name,ABS_VESSEL.business_status--business_status,ABS_VESSEL.lifecycle_status--lifecycle_status,ABS_VESSEL.delivery_date--delivery_date,ABS_VESSEL.commercial_group--commercial_group,ABS_VESSEL.FACILITY_ID,ABS_FEE_AGREEMENT_DETAIL{DESCRIPTION,INSTANCES_COUNT,SERVICE_GROUP_ID}},rel.contract_author{email.emailaddress--email}";
                    string freedom_api_url_where = (String)context.Variables["maximoUrl"] + "api/os/" + "ABSAPIFADETAIL?lean=1&oslc.select=" +  $"{oslc_select}" + $"&{oslc_where}";
                    return freedom_api_url_where;
                }</set-url>
			<set-method>GET</set-method>
			<set-header name="apikey" exists-action="override">
				<value>@((String)context.Variables["apikey"])</value>
			</set-header>
			<set-body />
		</send-request>
	</backend>
	<outbound>
		<base />
		<return-response response-variable-name="data">
			<set-status code="200" reason="OK" />
			<set-header name="Content-Type" exists-action="override">
				<value>application/json</value>
			</set-header>
			<set-body>@(((IResponse)context.Variables["data"]).Body.As<JObject>().ToString())</set-body>
		</return-response>
	</outbound>
	<on-error>
		<base />
	</on-error>
</policies>
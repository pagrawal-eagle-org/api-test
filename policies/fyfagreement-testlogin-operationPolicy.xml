<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
	<inbound>
		<set-variable name="envProps" value="{{environment-properties}}" />
		<set-variable name="maximoUrl" value="@{
                    JObject json = JObject.Parse(context.Variables.GetValueOrDefault<string>("envProps"));
                    var typeCode = json.GetValue("freddev9-maximourl");
                    return typeCode;       
        }" />
		<set-variable name="newmaximoUrl" value="@{                    
                    var prop = context.Request.Headers.GetValueOrDefault("ABS-Api-Environment-Key")+"-maximourl";  
                    JObject json = JObject.Parse(context.Variables.GetValueOrDefault<string>("envProps"));                
                    var typeCode = json.GetValue(prop) ;
                    return typeCode.ToString(); 
        }" />
	</inbound>
	<backend />
	<outbound>
		<return-response response-variable-name="send-request-response">
			<set-status code="200" reason="OK" />
			<set-header name="Content-Type" exists-action="override">
				<value>application/text</value>
			</set-header>
			<set-body>@{
                    return $"{(String)context.Variables["newmaximoUrl"]}";
                }</set-body>
		</return-response>
	</outbound>
	<on-error>
		<set-header name="ErrorReason" exists-action="override">
			<value>@(context.LastError.Reason)</value>
		</set-header>
		<set-header name="ErrorMessage" exists-action="override">
			<value>@(context.LastError.Message)</value>
		</set-header>
		<set-header name="ErrorStatusCode" exists-action="override">
			<value>@(context.Response.StatusCode.ToString())</value>
		</set-header>
		<base />
	</on-error>
</policies>
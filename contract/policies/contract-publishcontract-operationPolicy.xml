<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
	<inbound>
		<base />
	</inbound>
	<backend>
		<send-request mode="new" response-variable-name="resp" timeout="60" ignore-error="true">
			<set-url>@{                    
                string contractId= (string)context.Request.Url.Query.GetValueOrDefault("contractId");
                string contractType= (string)context.Request.Url.Query.GetValueOrDefault("contractType");

                string icertis_api_url = $"{{IcertisEnvUrl}}" + contractType + "/" + contractId + "/actions/Publish/";
                return icertis_api_url; 
                }</set-url>
			<set-method>POST</set-method>
			<set-header name="Content-Type" exists-action="override">
				<value>application/json</value>
			</set-header>
			<set-header name="Authorization" exists-action="override">
				<value>@{
                    return $"Bearer {(String)context.Variables["token"]}";
                }</value>
			</set-header>
			<set-header name="Accept" exists-action="override">
				<value>application/json</value>
			</set-header>
			<set-body />
		</send-request>
	</backend>
	<outbound>
		<base />
		<return-response response-variable-name="resp">
			<set-status code="@(((IResponse)context.Variables["resp"]).StatusCode)" reason="@(((IResponse)context.Variables["resp"]).StatusReason)" />
			<set-header name="Content-Type" exists-action="override">
				<value>application/json</value>
			</set-header>
			<set-body>@(((IResponse)context.Variables["resp"]).Body.As<JObject>().ToString())</set-body>
		</return-response>
	</outbound>
	<on-error>
		<base />
	</on-error>
</policies>